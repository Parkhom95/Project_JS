// Сравните два фрагмента кода.

// Первый использует finally для выполнения кода после try..catch:

// try {
//   начать работу
//   работать
// } catch (e) {
//   обработать ошибку
// } finally {
//   очистить рабочее пространство
// }
// Второй фрагмент просто ставит очистку после try..catch:

// try {
//   начать работу
//   работать
// } catch (e) {
//   обработать ошибку
// }

// очистить рабочее пространство
// Нам определённо нужна очистка после работы, неважно возникли ошибки или нет.

// Есть ли здесь преимущество в использовании finally или оба фрагмента кода одинаковы? Если такое преимущество есть, то дайте пример, когда оно проявляется.

//полнение кода может быть прервано:
function process() {
    try {

      console.log("Начинаем работу");
      if (Math.random() > 0.5) throw new Error("Ошибка во время работы");
      console.log("Работа завершена успешно");
      return;
    } catch (e) {
  
      console.error(e.message);
      throw new Error("Ошибка в процессе обработки");
    }
 
    console.log("Очистка рабочего пространства");
  }
  
  process();

  // если спользовать finally
  function process() {
    try {
      console.log("Начинаем работу");
      if (Math.random() > 0.5) throw new Error("Ошибка во время работы");
      console.log("Работа завершена успешно");
      return; 
    } catch (e) {
      console.error(e.message);
      throw new Error("Ошибка в процессе обработки");
    } finally {
      console.log("Очистка рабочего пространства");
    }
  }

  process();